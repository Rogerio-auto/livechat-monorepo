version: "3.8"

networks:
  proxy:
    external: true
  internal:
    driver: bridge

volumes:
  redis-data:
  rabbitmq-data:

services:
  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    networks: [internal]
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-app}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-app}
    ports:
      - "15672:15672"
    networks: [internal]
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 10

  backend:
    build:
      context: ./backend
    image: ${REGISTRY:-local}/app-backend:${TAG:-latest}
    env_file:
      - ./backend/.env
    environment:
      NODE_ENV: production
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks: [internal, proxy]
    ports:
      - "${PORT_BACKEND:-5000}:5000"
    deploy:
      resources:
        limits:
          cpus: "0.75"
          memory: 768M
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`${DOMAIN_API}`)
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls.certresolver=letsencrypt
      - traefik.http.services.api.loadbalancer.server.port=5000

  worker-inbound:
    image: ${REGISTRY:-local}/app-backend:${TAG:-latest}
    env_file:
      - ./backend/.env
    command: ["node", "dist/worker.js", "inbound"]
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_started
    networks: [internal]

  worker-outbound:
    image: ${REGISTRY:-local}/app-backend:${TAG:-latest}
    env_file:
      - ./backend/.env
    command: ["node", "dist/worker.js", "outbound"]
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_started
    networks: [internal]

  worker-campaigns:
    image: ${REGISTRY:-local}/app-backend:${TAG:-latest}
    env_file:
      - ./backend/.env
    command: ["node", "dist/worker.campaigns.js"]
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_started
    networks: [internal]

  frontend:
    build:
      context: ./frontend
    image: ${REGISTRY:-local}/app-frontend:${TAG:-latest}
    env_file:
      - ./frontend/.env.production
    depends_on:
      - backend
    networks: [proxy]
    ports:
      - "${PORT_FRONTEND:-4173}:80"
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 256M
    labels:
      - traefik.enable=true
      - traefik.http.routers.app.rule=Host(`${DOMAIN_APP}`)
      - traefik.http.routers.app.entrypoints=websecure
      - traefik.http.routers.app.tls.certresolver=letsencrypt
      - traefik.http.services.app.loadbalancer.server.port=80
