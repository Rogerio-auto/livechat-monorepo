version: "3.8"

networks:
  internal:
    driver: bridge
    enable_ipv6: true

volumes:
  redis-data:
  rabbitmq-data:

services:
  api:
    build:
      context: ./backend
    env_file:
      - ./backend/.env
    environment:
      NODE_ENV: production
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    ports:
      - "5000:5000"
    restart: unless-stopped

  worker-inbound:
    build:
      context: ./backend
    env_file:
      - ./backend/.env
    command: ["node", "dist/worker.js", "inbound"]
    restart: unless-stopped
    depends_on:
      api:
        condition: service_started
    networks:
      - internal

  worker-outbound:
    build:
      context: ./backend
    env_file:
      - ./backend/.env
    command: ["node", "dist/worker.js", "outbound"]
    restart: unless-stopped
    depends_on:
      api:
        condition: service_started
    networks:
      - internal

  worker-campaigns:
    build:
      context: ./backend
    env_file:
      - ./backend/.env
    command: ["node", "dist/worker.campaigns.js"]
    restart: unless-stopped
    depends_on:
      api:
        condition: service_started
    networks:
      - internal

  frontend:
    build:
      context: ./frontend
    env_file:
      - ./frontend/.env.production
    depends_on:
      - api
    ports:
      - "3002:80"
    networks:
      - internal
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - internal
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-app}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-app}
    ports:
      - "15672:15672"
    networks:
      - internal
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 10
