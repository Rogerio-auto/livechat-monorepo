import { useEffect, useMemo, useState } from "react";
import Sidebar from "../componets/Sidbars/sidebar";
import { useLocation } from "react-router-dom";
import ProposalForm from "../componets/propostas/ProposalForm";
import { FaFileAlt, FaFileSignature, FaReceipt } from 'react-icons/fa';

const API = import.meta.env.VITE_API_URL?.replace(/\/$/, "") || "http://localhost:5000";

type Proposal = {
  id: string;
  number: string;
  title: string;
  total_value: number;
  status: string | null;
  valid_until?: string | null;
  created_at?: string | null;
  customer_id: string;
  ai_generated?: boolean | null;
};

type DocSummary = {
  id: string;
  customer_id: string;
  doc_type: 'CONTRACT' | 'RECEIPT';
  has_pdf?: boolean;
  created_at?: string | null;
};

function formatMoney(n: number | null | undefined) {
  if (n === null || n === undefined) return '-';
  return Number(n).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
}
function formatDate(iso?: string | null) {
  if (!iso) return '-';
  const d = new Date(iso);
  if (isNaN(d.getTime())) return '-';
  return d.toLocaleDateString('pt-BR');
}

export default function DocumentosPage() {
  const [propostas, setPropostas] = useState<Proposal[]>([]);
  const [docs, setDocs] = useState<DocSummary[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showNew, setShowNew] = useState(false);
  const location = useLocation() as any;
  const initialLead = location?.state?.lead ?? null;
  const [q, setQ] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('ALL');

  const fetchJson = async <T,>(url: string, init?: RequestInit): Promise<T> => {
    const res = await fetch(url, { credentials: "include", headers: { "Content-Type": "application/json" }, ...init });
    if (!res.ok) {
      const err = await res.json().catch(() => ({}));
      throw new Error(err?.error || `HTTP ${res.status}`);
    }
    return res.json();
  };

  const load = async () => {
    setLoading(true);
    setError(null);
    try {
      await fetchJson(`${API}/auth/me`);
      const [props, dcs] = await Promise.all([
        fetchJson<Proposal[]>(`${API}/proposals`),
        fetchJson<DocSummary[]>(`${API}/documents`),
      ]);
      setPropostas(Array.isArray(props) ? props : []);
      setDocs(Array.isArray(dcs) ? dcs : []);
    } catch (e: any) {
      setError(e?.message || 'Erro ao carregar documentos');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => { load(); }, []);

  const statusOptions = useMemo(() => {
    const set = new Set<string>();
    for (const p of propostas) { if (p.status) set.add(String(p.status).toUpperCase()); }
    return Array.from(set).sort();
  }, [propostas]);

  const filteredPropostas = useMemo(() => {
    let arr = propostas as Proposal[];
    const term = q.trim().toLowerCase();
    if (term) arr = arr.filter(p => (p.number||'').toLowerCase().includes(term) || (p.title||'').toLowerCase().includes(term));
    if (statusFilter && statusFilter !== 'ALL') arr = arr.filter(p => String(p.status||'').toUpperCase() === statusFilter);
    return arr;
  }, [propostas, q, statusFilter]);

  const docsByCustomer = useMemo(() => {
    const map = new Map<string, { contract?: DocSummary; receipt?: DocSummary }>();
    for (const d of docs) {
      if (!map.has(d.customer_id)) map.set(d.customer_id, {});
      const slot = map.get(d.customer_id)!;
      if (d.doc_type === 'CONTRACT') {
        if (!slot.contract || new Date(d.created_at || 0) > new Date(slot.contract.created_at || 0)) slot.contract = d;
      } else if (d.doc_type === 'RECEIPT') {
        if (!slot.receipt || new Date(d.created_at || 0) > new Date(slot.receipt.created_at || 0)) slot.receipt = d;
      }
    }
    return map;
  }, [docs]);

  const onDownloadDoc = (id?: string) => {
    if (!id) return;
    window.location.href = `${API}/documents/${id}/download`;
  };

  const badgeClass = (s?: string | null) => {
    const st = String(s || '').toUpperCase();
    if (st === 'ACCEPTED' || st === 'APPROVED') return 'bg-green-100 text-green-700 ring-1 ring-green-200';
    if (st === 'SENT' || st === 'ISSUED') return 'bg-blue-100 text-blue-700 ring-1 ring-blue-200';
    if (st === 'REJECTED' || st === 'CANCELLED') return 'bg-red-100 text-red-700 ring-1 ring-red-200';
    return 'bg-gray-100 text-gray-700 ring-1 ring-gray-200';
  };

  return (
    <>
      <Sidebar />
      <div className="ml-16 min-h-screen bg-[#EDEDED] p-8">
        <div className="bg-white rounded-2xl mt-8 shadow-lg p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-[#204A34]">Documentos</h2>
            <button onClick={() => setShowNew(true)} className="bg-[#204A34] text-white px-4 py-2 rounded-xl hover:bg-[#42CD55] transition">+ Nova Proposta</button>
          </div>

          <div className="flex flex-wrap gap-3 items-center mb-4">
            <input value={q} onChange={e=>setQ(e.target.value)} placeholder="Pesquisar número ou título..." className="border rounded-xl px-3 py-2 text-sm w-64" />
            <select value={statusFilter} onChange={e=>setStatusFilter(e.target.value)} className="border rounded-xl px-3 py-2 text-sm">
              <option value="ALL">Todos os status</option>
              {statusOptions.map(s => (<option key={s} value={s}>{s}</option>))}
            </select>
            {/* IA apenas removido */}
          </div>

          {loading && <div className="text-gray-500">Carregando...</div>}
          {error && !loading && <div className="text-red-600">{error}</div>}

          {!loading && !error && (
            <div className="overflow-x-auto">
              <table className="w-full text-left border-collapse">
                <thead>
                  <tr className="text-gray-600 border-b">
                    <th className="p-2">Número</th>
                    <th className="p-2">Título</th>
                    <th className="p-2">Valor</th>
                    <th className="p-2">Status</th>
                    <th className="p-2">Criado em</th>
                    <th className="p-2">Válido até</th>
                    <th className="p-2">Ações</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredPropostas.map((p) => {
                    const rel = docsByCustomer.get(p.customer_id) || {};
                    const hasContract = !!rel.contract?.has_pdf;
                    const hasReceipt = !!rel.receipt?.has_pdf;
                    return (
                      <tr key={p.id} className="border-b hover:bg-emerald-50/40">
                        <td className="p-2 font-medium text-zinc-800">{p.number}</td>
                        <td className="p-2">{p.title}</td>
                        <td className="p-2">{formatMoney(p.total_value)}</td>
                        <td className="p-2"><span className={`text-xs px-2 py-1 rounded-full ${badgeClass(p.status)}`}>{p.status || '-'}</span></td>
                        <td className="p-2">{formatDate(p.created_at)}</td>
                        <td className="p-2">{formatDate(p.valid_until)}</td>
                        <td className="p-2">
                          <div className="flex gap-2">
                            {/* Proposta: cor se existe (sempre, pois estamos na tabela proposals) */}
                            <button
                              className={`p-2 rounded-md text-lg flex items-center justify-center w-9 h-9 ${true ? 'bg-emerald-600 text-white' : 'bg-gray-200 text-gray-600'}`}
                              title="Proposta (PDF não configurado)"
                              onClick={() => { /* sem PDF de proposta no schema; pode-se implementar futuramente */ }}
                            ><FaFileAlt /> </button>
                            {/* Contrato */}
                            <button
                              className={`p-2 rounded-md text-lg flex items-center justify-center w-9 h-9 ${hasContract ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-600'}`}
                              disabled={!hasContract}
                              title={hasContract ? 'Baixar Contrato' : 'Contrato não disponível'}
                              onClick={() => onDownloadDoc(rel.contract?.id)}
                            ><FaFileSignature /> </button>
                            {/* Recibo */}
                            <button
                              className={`p-2 rounded-md text-lg flex items-center justify-center w-9 h-9 ${hasReceipt ? 'bg-amber-600 text-white' : 'bg-gray-200 text-gray-600'}`}
                              disabled={!hasReceipt}
                              title={hasReceipt ? 'Baixar Recibo' : 'Recibo não disponível'}
                              onClick={() => onDownloadDoc(rel.receipt?.id)}
                            ><FaReceipt /> </button>
                          </div>
                        </td>
                      </tr>
                    );
                  })}
                  {filteredPropostas.length === 0 && (
                    <tr>
                      <td className="p-4 text-gray-500" colSpan={7}>Nenhuma proposta encontrada.</td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {showNew && (
          <div className="fixed inset-0 bg-black/40 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <div className="w-full max-w-3xl rounded-2xl bg-white p-4 shadow-xl">
              <div className="flex items-center justify-between mb-2">
                <h3 className="font-semibold text-zinc-800">Criar Proposta</h3>
                <button className="text-zinc-500 hover:text-zinc-800" onClick={() => setShowNew(false)}>x</button>
              </div>
              <ProposalForm initialLead={initialLead} onClose={() => setShowNew(false)} onSaved={() => { setShowNew(false); load(); }} />
            </div>
          </div>
        )}
      </div>
    </>
  );
}
