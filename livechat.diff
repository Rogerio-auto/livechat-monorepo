--- a/frontend/src/pages/livechat.tsx
+++ b/frontend/src/pages/livechat.tsx
@@ -14,6 +14,13 @@
 const API =
   (import.meta.env.VITE_API_URL as string | undefined)?.replace(/\/$/, "") ||
   "http://localhost:5000";
+const MEDIA_PREVIEW_LABELS: Record<string, string> = {
+  IMAGE: "üñºÔ∏è Imagem",
+  VIDEO: "üé¨ V√≠deo",
+  AUDIO: "üéß √Åudio",
+  DOCUMENT: "üìé Documento",
+  FILE: "üìé Documento",
+};
 export default function LiveChatPage() {
   const navigate = useNavigate();
   const [chatsState, setChatsState] = useState<Chat[]>([]);
@@ -506,6 +513,30 @@
     return [...list].sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());
   };
 
+  const normalizeChat = useCallback((raw: any): Chat => {
+    if (!raw) return raw as Chat;
+    const base = { ...raw };
+    base.last_message = base.last_message ?? null;
+    base.last_message_at = base.last_message_at ?? null;
+    base.last_message_from = base.last_message_from ?? null;
+    base.last_message_type = base.last_message_type ?? null;
+    base.last_message_media_url = base.last_message_media_url ?? null;
+    return base as Chat;
+  }, []);
+
+  const normalizeChats = useCallback((list: any[]): Chat[] => list.map((item) => normalizeChat(item)), [normalizeChat]);
+
+  const normalizeMessage = useCallback((raw: any): Message => {
+    if (!raw) return raw as Message;
+    return {
+      ...raw,
+      media_url: raw.media_url ?? null,
+      type: raw.type ?? "TEXT",
+    } as Message;
+  }, []);
+
+  const normalizeMessagesList = useCallback((list: any[]): Message[] => list.map((item) => normalizeMessage(item)), [normalizeMessage]);
+
   const mergeMessagesAscending = (current: Message[], incoming: Message[]) => {
     if (!incoming.length) return sortMessagesAsc(current);
     const map = new Map<string, Message>();
@@ -516,16 +547,18 @@
 
   const appendMessageToCache = useCallback(
     (msg: Message) => {
-      const existing = messagesCacheRef.current[msg.chat_id] || [];
-      if (existing.some((item) => item.id === msg.id)) return;
-      const updated = sortMessagesAsc([...existing, msg]);
-      messagesCacheRef.current[msg.chat_id] = updated;
-      if (currentChatIdRef.current === msg.chat_id) {
+      const normalized = normalizeMessage(msg);
+      const chatId = normalized.chat_id;
+      const existing = messagesCacheRef.current[chatId] || [];
+      if (existing.some((item) => item.id === normalized.id)) return;
+      const updated = sortMessagesAsc([...existing, normalized]);
+      messagesCacheRef.current[chatId] = updated;
+      if (currentChatIdRef.current === chatId) {
         setMessages(updated);
         scrollToBottom();
       }
     },
-    [scrollToBottom, setMessages],
+    [normalizeMessage, scrollToBottom, setMessages],
   );
 
   const updateMessageStatusInCache = useCallback(
@@ -577,6 +610,12 @@
                 last_message: p.last_message ?? c.last_message,
                 last_message_at: p.last_message_at ?? c.last_message_at,
                 last_message_from: p.last_message_from ?? c.last_message_from,
+                last_message_type: Object.prototype.hasOwnProperty.call(p, "last_message_type")
+                  ? (p.last_message_type ?? null)
+                  : c.last_message_type ?? null,
+                last_message_media_url: Object.prototype.hasOwnProperty.call(p, "last_message_media_url")
+                  ? (p.last_message_media_url ?? null)
+                  : c.last_message_media_url ?? null,
                 assigned_agent_id: Object.prototype.hasOwnProperty.call(p, "assigned_agent_id")
                   ? p.assigned_agent_id
                   : c.assigned_agent_id,
@@ -600,6 +639,12 @@
               last_message: p.last_message ?? prev.last_message,
               last_message_at: p.last_message_at ?? prev.last_message_at,
               last_message_from: p.last_message_from ?? prev.last_message_from,
+              last_message_type: Object.prototype.hasOwnProperty.call(p, "last_message_type")
+                ? (p.last_message_type ?? null)
+                : prev.last_message_type ?? null,
+              last_message_media_url: Object.prototype.hasOwnProperty.call(p, "last_message_media_url")
+                ? (p.last_message_media_url ?? null)
+                : prev.last_message_media_url ?? null,
               assigned_agent_id: Object.prototype.hasOwnProperty.call(p, "assigned_agent_id")
                 ? p.assigned_agent_id
                 : prev.assigned_agent_id,
@@ -655,31 +700,31 @@
       };
 
       const applyResult = (items: Chat[], total: number) => {
-        // aplica somente se ainda for a requisio mais nova
+        const normalizedItems = normalizeChats(items);
         if (myReqId !== chatsReqIdRef.current) {
           return { items: chatsRef.current, total: chatsTotal };
         }
 
         setChats((prev) => {
-          if (reset) return items;
+          if (reset) return normalizedItems;
           const map = new Map<string, Chat>();
           for (const c of prev) map.set(c.id, c);
-          for (const c of items) map.set(c.id, c);
+          for (const c of normalizedItems) map.set(c.id, c);
           return Array.from(map.values());
         });
 
         const baseOffset = reset ? 0 : offset;
-        const nextOffset = baseOffset + items.length;
+        const nextOffset = baseOffset + normalizedItems.length;
         setChatsOffset(nextOffset);
         chatsOffsetRef.current = nextOffset;
 
         setChatsTotal(total ?? 0);
         const more = total != null
-          ? nextOffset < total && items.length === PAGE_SIZE
-          : items.length === PAGE_SIZE;
+          ? nextOffset < total && normalizedItems.length === PAGE_SIZE
+          : normalizedItems.length === PAGE_SIZE;
         setHasMoreChats(more);
 
-        return { items, total };
+        return { items: normalizedItems, total };
       };
 
       try {
@@ -730,7 +775,7 @@
         // se no for reset, controller  local e no reaproveitado
       }
     },
-    [API, debouncedQ, status, inboxId, PAGE_SIZE]
+    [API, debouncedQ, status, inboxId, PAGE_SIZE, normalizeChats]
   );
 
 
@@ -798,20 +843,20 @@
         }
 
         const rawItems = Array.isArray(payload) ? (payload as Message[]) : [];
-        const normalized = sortMessagesAsc(rawItems);
-
-        const fallbackCursor = normalized.length > 0 ? normalized[0].created_at : null;
+        const normalizedList = sortMessagesAsc(normalizeMessagesList(rawItems));
+
+        const fallbackCursor = normalizedList.length > 0 ? normalizedList[0].created_at : null;
         const headerCursor = headerBefore && headerBefore.trim() !== "" ? headerBefore : null;
         const hasMore = (
           headerBefore != null
             ? headerBefore.trim() !== ""
-            : normalized.length >= MESSAGES_PAGE_SIZE
+            : normalizedList.length >= MESSAGES_PAGE_SIZE
         );
         const nextBefore = hasMore ? (headerCursor ?? fallbackCursor) : null;
 
         const existing = messagesCacheRef.current[chatId] || [];
         const prevCount = existing.length;
-        const combined = reset ? normalized : mergeMessagesAscending(existing, normalized);
+        const combined = reset ? normalizedList : mergeMessagesAscending(existing, normalizedList);
         messagesCacheRef.current[chatId] = combined;
         messagesMetaRef.current[chatId] = { nextBefore, hasMore };
 
@@ -835,7 +880,7 @@
         throw error;
       }
     },
-    [API, navigate, scrollToBottom, setMessagesHasMore],
+    [API, navigate, scrollToBottom, setMessagesHasMore, normalizeMessagesList],
   );
 
 
@@ -1085,6 +1130,7 @@
           chat_id: inserted.chat_id ?? payload.chatId,
           body: inserted.body ?? inserted.content ?? payload.text,
           content: inserted.content ?? inserted.body ?? payload.text,
+          media_url: inserted.media_url ?? null,
           sender_type: inserted.sender_type ?? (inserted.is_from_customer ? "CUSTOMER" : "AGENT"),
           sender_id: inserted.sender_id ?? null,
           created_at: inserted.created_at ?? new Date().toISOString(),
@@ -1126,6 +1172,7 @@
             chat_id: inserted.chat_id ?? currentChat.id,
             body: inserted.body ?? inserted.content ?? file.name,
             content: inserted.content ?? inserted.body ?? file.name,
+            media_url: inserted.media_url ?? null,
             sender_type: inserted.sender_type ?? (inserted.is_from_customer ? "CUSTOMER" : "AGENT"),
             sender_id: inserted.sender_id ?? null,
             created_at: inserted.created_at ?? new Date().toISOString(),
@@ -1396,46 +1443,54 @@
                     {isChatsLoading ? "Carregando chats..." : "Nenhum chat"}
                   </div>
                 )}
-                {chats.map((c) => (
-                  <button
-                    key={c.id}
-                    onClick={() => setCurrentChat(c)}
-                    className={`w-full text-left p-3 rounded-lg bg-gray-100 hover:bg-green-50 ${currentChat?.id === c.id ? "bg-emerald-50" : ""
-                      }`}
-                  >
-                    <div className="flex items-center justify-between">
-                      <div className="font-medium text-zinc-800 truncate">
-                        {c.customer_name || "Desconhecido"}
-                        <span className="ml-2 text-xs text-zinc-500">
-                          {c.customer_phone || c.customer_id.slice(0, 8)}
-                        </span>
-                      </div>
-                      <span className="text-[10px] px-2 py-0.5 rounded-full bg-zinc-100 text-zinc-600">
-                        {c.status}
-                      </span>
-                    </div>
-                    <div className="mt-0.5 flex items-center justify-between text-[11px] text-zinc-500">
-                      <span className="truncate pr-2">
-                        {c.last_message ? (
-                          <>
-                            {c.last_message_from === "AGENT" ? "Voc: " : ""}
-                            {c.last_message}
-                          </>
-                        ) : (
-                          <span className="text-zinc-400">(Sem mensagem)</span>
-                        )}
-                      </span>
-                      <span>
-                        {c.last_message_at
-                          ? new Date(c.last_message_at).toLocaleTimeString([], {
-                            hour: "2-digit",
-                            minute: "2-digit",
-                          })
-                          : "-"}
-                      </span>
-                    </div>
-                  </button>
-                ))}
+                {chats.map((c) => {
+          const normalizedType = (c.last_message_type || "").toUpperCase();
+          const mediaLabel = c.last_message_media_url
+            ? MEDIA_PREVIEW_LABELS[normalizedType] ?? MEDIA_PREVIEW_LABELS.DOCUMENT
+            : null;
+
+          return (
+            <button
+              key={c.id}
+              onClick={() => setCurrentChat(c)}
+              className={`w-full text-left p-3 rounded-lg bg-gray-100 hover:bg-green-50 ${currentChat?.id === c.id ? "bg-emerald-50" : ""}`}
+            >
+              <div className="flex items-center justify-between">
+                <div className="font-medium text-zinc-800 truncate">
+                  {c.customer_name || "Desconhecido"}
+                  <span className="ml-2 text-xs text-zinc-500">
+                    {c.customer_phone || c.customer_id.slice(0, 8)}
+                  </span>
+                </div>
+                <span className="text-[10px] px-2 py-0.5 rounded-full bg-zinc-100 text-zinc-600">
+                  {c.status}
+                </span>
+              </div>
+              <div className="mt-0.5 flex items-center justify-between text-[11px] text-zinc-500">
+                <span className="truncate pr-2">
+                  {mediaLabel ? (
+                    mediaLabel
+                  ) : c.last_message ? (
+                    <>
+                      {c.last_message_from === "AGENT" ? "Voc: " : ""}
+                      {c.last_message}
+                    </>
+                  ) : (
+                    <span className="text-zinc-400">(Sem mensagem)</span>
+                  )}
+                </span>
+                <span>
+                  {c.last_message_at
+                    ? new Date(c.last_message_at).toLocaleTimeString([], {
+                      hour: "2-digit",
+                      minute: "2-digit",
+                    })
+                    : "-"}
+                </span>
+              </div>
+            </button>
+          );
+        })}
 
                 {chats.length > 0 && isChatsLoading && (
                   <div className="p-3 text-xs text-zinc-500 text-center">Carregando chats...</div>
